{
	"info": {
		"_postman_id": "2fc95af7-0b7a-4e2f-89a8-7f3dc2cc9c56",
		"name": "Khusm API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14527260",
		"_collection_link": "https://blue-spaceship-635219.postman.co/workspace/bb89ea51-88de-41a3-954d-85f6b17b9e10/collection/14527260-2fc95af7-0b7a-4e2f-89a8-7f3dc2cc9c56?action=share&source=collection_link&creator=14527260"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Creating User",
					"item": [
						{
							"name": "ValidateUserAsync",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"OTP sent . Please verify.  \");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Define the allowed prefixes\r",
											"var prefixes = [\"011\", \"012\", \"015\", \"010\"];\r",
											"\r",
											"// Select a random prefix\r",
											"var randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
											"\r",
											"// Generate the remaining 8 random digits\r",
											"var randomNumber = Math.floor(10000000 + Math.random() * 90000000); // Ensures 8 digits\r",
											"\r",
											"// Combine the prefix and random digits\r",
											"var phoneNumber = randomPrefix + randomNumber;\r",
											"\r",
											"// Store in Postman environment variable\r",
											"pm.environment.set(\"changenumber\", phoneNumber);\r",
											"pm.environment.set(\"phone\", phoneNumber);\r",
											"\r",
											"// Log the generated phone number\r",
											"console.log(\"Generated Phone Number:\", phoneNumber);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"firstName\": \"{{first}}\",\r\n  \"lastName\": \"{{last}}\",\r\n  \"phone\":  \"{{random_phone}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"confirmPassword\": \"{{cpassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ValidateUserAsync?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ValidateUserAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOtp Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"otp\", jsonData.message);\r",
											"\r",
											"pm.test(\"Response contains token\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"    \r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Retrieve the previously generated phone number\r",
											"var oldNumber = pm.environment.get(\"random_phone\");\r",
											"\r",
											"// Set the new variable \"changenumber\" with the same value\r",
											"pm.environment.set(\"changenumber\", oldNumber);\r",
											"\r",
											"// Log for debugging\r",
											"console.log(\"Old Number (random_phone):\", oldNumber);\r",
											"console.log(\"New Variable (changenumber):\", pm.environment.get(\"changenumber\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Member/GetOtp?lang={{lang}}&phone={{random_phone}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Member",
										"GetOtp"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "phone",
											"value": "{{random_phone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "otpVerification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Registration successful!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"{{first}}\",\r\n  \"lastName\":  \"{{last}}\",\r\n  \"phone\":  \"{{random_phone}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"confirmPassword\": \"{{cpassword}}\"\r\n  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/OtpVerificationSignUpAsync?lang={{lang}}&otp={{otp}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"OtpVerificationSignUpAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "otp",
											"value": "{{otp}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidateUserAsync",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", () => pm.response.to.have.status(400));\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Please Mobile number must be number\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"phone\": \"invalid-phone\", // Invalid phone number\r\n  \"password\": \"password123\",\r\n  \"confirmPassword\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ValidateUserAsync?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ValidateUserAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "MissingReq_UserAsync",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has error messages for all required fields that are returned\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedErrorMessages = {\r",
											"        \"lastName\": \"The LastName field is required.\",\r",
											"        \"password\": \"The Password field is required.\",\r",
											"        \"firstName\": \"The FirstName field is required.\",\r",
											"        \"confirmPassword\": \"The ConfirmPassword field is required.\"\r",
											"    };\r",
											"\r",
											"    // Ensure the errors object exists\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"\r",
											"    // Dynamically check for errors that exist in the response\r",
											"    Object.keys(response.errors).forEach(field => {\r",
											"        // If the field is in the expected errors list, check the message\r",
											"        if (expectedErrorMessages[field]) {\r",
											"            pm.expect(response.errors[field][0]).to.eql(expectedErrorMessages[field]);\r",
											"        } else {\r",
											"            // Log for fields that are returned but not in the expected list\r",
											"            console.log(`Unexpected field in errors: ${field}`);\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"password\": \"password123\",\r\n  \"phone\": \"invalid-phone\"\r\n  // Missing confirmPassword\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ValidateUserAsync?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ValidateUserAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"token\", jsonData.token);\r",
											"pm.environment.set(\"refreshToken\", jsonData.refreshToken);\r",
											"pm.test(\"Response contains token\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.token).to.be.a('string');\r",
											"    \r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phoneOrEmail\": \"{{random_phone}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/Login?lang={{lang}}\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"Login"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400); \r",
											"    // For invalid credentials (incorrect username/password), return 401 Unauthorized.\r",
											"});\r",
											"\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Phone or Password is incorrect!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phoneOrEmail\": \"01116590586\",\r\n  \"password\": \"wrongpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/Login?lang={{lang}}\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"Login"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => pm.response.to.have.status(400));\r",
											"// For malformed requests (missing required fields or invalid data), return 400 Bad Request.\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Password is required\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phoneOrEmail\": \"01116590586\"\r\n  // Missing password\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/Login?lang={{lang}}\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"Login"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SQL_injection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for SQL Injection attempt\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    // If SQL injection is detected, the API should return a 403 Forbidden response\r",
											"});\r",
											"\r",
											"pm.test(\"Response body indicates blocked request\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Phone or Password is incorrect!\");\r",
											"    // The response should explain that the request was blocked due to a detected SQL injection.\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phoneOrEmail\": \"admin' OR '1'='1\",\r\n  \"password\": \"wrongpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/Login?lang={{lang}}\n",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"Login"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}\n"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logout successful\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Logout\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/Logout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"Logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Members",
					"item": [
						{
							"name": "MemberByPhone",
							"item": [
								{
									"name": "GetMemberByPhone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Member details retrieved successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"\r",
													"    // Retrieve phone number from environment\r",
													"    let expectedPhoneNumber = pm.environment.get(\"changenumber\"); // \"changenumber\" should be set in environment variables\r",
													"    let responseData = pm.response.json();  // Parse JSON response\r",
													"    if (responseData.id) {\r",
													"    pm.environment.set(\"userid\", responseData.id);  // Set the ID in environment\r",
													"    console.log(\"User ID set to:\", responseData.id);\r",
													"}\r",
													"\r",
													"\r",
													"    // Check if 'phone' exists in response and matches the expected phone number\r",
													"    pm.expect(response.phone).to.eql(expectedPhoneNumber);\r",
													"\r",
													"    // Log for debugging\r",
													"    console.log(\"Expected Phone Number:\", expectedPhoneNumber);\r",
													"    console.log(\"Response Phone Number:\", response.phone);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/Member/GetMemberByPhoneAsync?lang={{lang}}&phone={{random_phone}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMemberByPhoneAsync"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "phone",
													"value": "{{random_phone}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetMemberByPhone (invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid phone number error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Data not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": 28,\r\n    \"firstName\": \"اسلام\",\r\n    \"lastName\": \"eee\",\r\n    \"phone\": \"01116590586\",\r\n    \"photo\": null,\r\n    \"gender\": null,\r\n    \"email\": null,\r\n    \"nationalId\": null,\r\n    \"dateOfActivationCard\": null,\r\n    \"otp\": \"687339\",\r\n    \"confirmed\": true,\r\n    \"dateOfBirth\": null,\r\n    \"isSubscriber\": false,\r\n    \"language\": \"\",\r\n    \"isNotificationEnabbled\": false,\r\n    \"subscribtionName\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/GetMemberByPhoneAsync?lang={{lang}}&phone={{random_phone}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMemberByPhoneAsync"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "phone",
													"value": "{{random_phone}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "UpdateMember",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Member updated successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Changed successfully\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "FirstName",
													"value": "{{first}}",
													"type": "text"
												},
												{
													"key": "LastName",
													"value": "{{last}}",
													"type": "text"
												},
												{
													"key": "IsMale",
													"value": "true",
													"type": "text"
												},
												{
													"key": "Email",
													"value": "eslamsamy650@gmail.com",
													"type": "text"
												},
												{
													"key": "NationalId",
													"value": "30006202107055",
													"type": "text"
												},
												{
													"key": "DateOfBirth",
													"value": "2000-06-20T00:00:00Z",
													"type": "text"
												},
												{
													"key": "Image",
													"type": "file",
													"src": "postman-cloud:///1f004070-8c55-4e40-8558-551b3277cf6c"
												},
												{
													"key": "ImageRemoved",
													"value": "false",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/Member/UpdateMember?lang={{lang}}&memberId={{userid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"UpdateMember"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{userid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateMember (invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Member updated successfully\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"User not found!\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "FirstName",
													"value": "{{first}}",
													"type": "text"
												},
												{
													"key": "LastName",
													"value": "{{last}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_url}}/api/Member/UpdateMember?lang={{lang}}&memberId={{memberId_invalid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"UpdateMember"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{memberId_invalid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Medical",
							"item": [
								{
									"name": "Valid medical profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Medical profile added successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Changed successfully\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{userid}}\",\r\n  \"blood\": \"O+\",\r\n  \"weight\": 70,\r\n  \"height\": 175,\r\n  \"chronicDiseases\": \"None\",\r\n  \"chronicMedication\": \"None\",\r\n  \"allergies\": \"None\",\r\n  \"notes\": \"No notes\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMedicalProfile?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMedicalProfile"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid medical profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User not found!\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"User not found!\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"memberId\": 123,\r\n  \"blood\": \"O+\",\r\n  \"weight\": 70,\r\n  \"height\": 175,\r\n  \"chronicDiseases\": \"None\",\r\n  \"chronicMedication\": \"None\",\r\n  \"allergies\": \"None\",\r\n  \"notes\": \"No notes\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMedicalProfile?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMedicalProfile"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid weight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid weight error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Weight must be more than 1 Kg and less than 250 Kg \");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"{{userid}}\",\r\n  \"blood\": \"O+\",\r\n  \"weight\": 0,\r\n  \"height\": 175,\r\n  \"chronicDiseases\": \"None\",\r\n  \"chronicMedication\": \"None\",\r\n  \"allergies\": \"None\",\r\n  \"notes\": \"No notes\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMedicalProfile?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMedicalProfile"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid height",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid weight error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Hight must be more than 20 cm and less than 250 cm \");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": {{userid}},\r\n  \"blood\": \"string\",\r\n  \"weight\": 2,\r\n  \"hight\": 0,\r\n  \"chronicDiseases\": \"string\",\r\n  \"chronicMedication\": \"string\",\r\n  \"allergies\": \"string\",\r\n  \"notes\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMedicalProfile?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMedicalProfile"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetMedicalProfile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Medical profile retrieved successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"اسلام\",\"age\":null,\"image\":null,\"blood\":null,\"weight\":null,\"hight\":null,\"chronicDiseases\":null,\"chronicMedication\":null,\"allergies\":null,\"notes\":null}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/GetMedicalProfile?lang={{lang}}&memberId={{userid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMedicalProfile"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{userid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetMedicalProfile (invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid member ID error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"User not found!\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"اسلام\",\"age\":null,\"image\":null,\"blood\":null,\"weight\":null,\"hight\":null,\"chronicDiseases\":null,\"chronicMedication\":null,\"allergies\":null,\"notes\":null}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/GetMedicalProfile?lang={{lang}}&memberId={{memberId_invalid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMedicalProfile"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{memberId_invalid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Subscription",
							"item": [
								{
									"name": "AddMemberSubscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription added successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Subscription added successfully\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": {{userid}},\r\n  \"subscribeId\": {{bronze_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMemberSubscription?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMemberSubscription"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AddMemberSubscription (invalid_Id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid subscription ID error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"User not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": {{memberId_invalid}},\r\n  \"subscribeId\": {{bronze_id}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMemberSubscription?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMemberSubscription"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "AddMemberSubscription (invalid_subs) Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription added successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Subscription not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": {{userid}},\r\n  \"subscribeId\": 4566\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/AddMemberSubscription?lang={{lang}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"AddMemberSubscription"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetMemberSubscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Subscription added successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    \r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/Member/GetMemberSubscription?lang={{lang}}&memberId={{userid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMemberSubscription"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{userid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetMemberSubscription (no_subs)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid member ID error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"User does not have a subscription \");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/Member/GetMemberSubscription?lang={{lang}}&memberId=25",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMemberSubscription"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "25"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetMemberSubscription (Invalid_id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid member ID error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Data not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/Member/GetMemberSubscription?lang={{lang}}&memberId={{memberId_invalid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"GetMemberSubscription"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{memberId_invalid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MemberPoints",
							"item": [
								{
									"name": "Valid member ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Member points retrieved successfully\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"    const response = pm.response.json();\r",
													"    \r",
													"    pm.test(\"User ID is retrieved from environment\", () => {\r",
													"        let userId = pm.environment.get(\"userid\"); // Retrieve from environment\r",
													"\r",
													"        pm.expect(userId).to.not.be.undefined;\r",
													"        pm.expect(userId).to.not.be.null;\r",
													"\r",
													"        // Ensure both IDs match correctly (convert types if needed)\r",
													"        pm.expect(response.id).to.eql(parseInt(userId, 10)); \r",
													"\r",
													"        \r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"memberId\": 28,\r\n  \"points\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/MemberPoints?lang={{lang}}&memberId={{userid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"MemberPoints"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{userid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid member ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Invalid member ID error\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"    const response = pm.response.json();\r",
													"    pm.expect(response.message).to.eql(\"Data not found\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"memberId\": 28,\r\n  \"points\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/Member/MemberPoints?lang={{lang}}&memberId={{memberId_invalid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"Member",
												"MemberPoints"
											],
											"query": [
												{
													"key": "lang",
													"value": "{{lang}}"
												},
												{
													"key": "memberId",
													"value": "{{memberId_invalid}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ChangePassword",
					"item": [
						{
							"name": "Valid old & new password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password changed successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Password changed successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{userid}}\",\r\n  \"currentPassword\": \"{{password}}\",\r\n  \"newPassword\": \"{{changepassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ChangePassword?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ChangePassword"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong old password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Current Password is incorrect!\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Current Password is incorrect!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": {{userid}},\r\n  \"currentPassword\": \"WrongPass123!\",\r\n  \"newPassword\": \"NewPass456!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ChangePassword?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ChangePassword"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invaild_userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User not found!\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"User not found!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": {{memberId_invalid}},\r\n  \"currentPassword\": \"WrongPass123!\",\r\n  \"newPassword\": \"NewPass456!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ChangePassword?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ChangePassword"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ChangePhone",
					"item": [
						{
							"name": "GetOtp Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"otp\", jsonData.message);\r",
											"\r",
											"pm.test(\"Response contains token\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"    \r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Retrieve the previously generated phone number\r",
											"var oldNumber = pm.environment.get(\"random_phone\");\r",
											"\r",
											"// Set the new variable \"changenumber\" with the same value\r",
											"pm.environment.set(\"changenumber\", oldNumber);\r",
											"\r",
											"// Log for debugging\r",
											"console.log(\"Old Number (random_phone):\", oldNumber);\r",
											"console.log(\"New Variable (changenumber):\", pm.environment.get(\"changenumber\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Member/GetOtp?lang={{lang}}&phone={{random_phone}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Member",
										"GetOtp"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "phone",
											"value": "{{random_phone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid phone change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Phone number updated successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Phone number changed successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ChangePhone?lang={{lang}}&userId={{userid}}&newPhoneNumber={{changenumber}}&otp={{otp}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ChangePhone"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "userId",
											"value": "{{userid}}"
										},
										{
											"key": "newPhoneNumber",
											"value": "{{changenumber}}"
										},
										{
											"key": "otp",
											"value": "{{otp}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid phone number format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid phone number format\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Invalid phone number\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ChangePhone?lang={{lang}}&userId={{userid}}&newPhoneNumber=114411113&otp={{otp}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ChangePhone"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "userId",
											"value": "{{userid}}"
										},
										{
											"key": "newPhoneNumber",
											"value": "114411113"
										},
										{
											"key": "otp",
											"value": "{{otp}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "OTP",
					"item": [
						{
							"name": "Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OTP sent successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"OTP sent . Please verify.  \");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phone\": \"{{changenumber}}\",\r\n  \"lang\": \"{{lang}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/SendOtp?lang={{lang}}&isPassword=true&phone={{changenumber}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"SendOtp"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "isPassword",
											"value": "true"
										},
										{
											"key": "phone",
											"value": "{{changenumber}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invaild_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid User\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"User not found!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phone\": \"01144111137\",\r\n  \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/SendOtp?lang={{lang}}&isPassword=true&phone=01155111137",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"SendOtp"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "isPassword",
											"value": "true"
										},
										{
											"key": "phone",
											"value": "01155111137"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing_Phone_Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing Phone Number\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"PLease Enter New phone number\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"phone\": \"01144111137\",\r\n  \"lang\": \"en\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/SendOtp?lang={{lang}}&isPassword=true&phone=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"SendOtp"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "isPassword",
											"value": "true"
										},
										{
											"key": "phone",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ForgetPassword",
					"item": [
						{
							"name": "GetOtp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"otp\", jsonData.message);\r",
											"\r",
											"pm.test(\"Response contains token\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.message).to.be.a('string');\r",
											"    \r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Member/GetOtp?lang={{lang}}&phone={{random_phone}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Member",
										"GetOtp"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "phone",
											"value": "{{random_phone}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password reset link sent\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Password changed successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": {{changenumber}},\r\n    \"Otp\" :\"{{otp}}\",\r\n    \"NewPassword\":\"{{password}}\",\r\n    \"ConfirmPassword\":\"{{cpassword}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ForgetPassword?Phone={{changenumber}}&Otp={{otp}}&NewPassword={{password}}&ConfirmPassword={{cpassword}}&lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ForgetPassword"
									],
									"query": [
										{
											"key": "Phone",
											"value": "{{changenumber}}"
										},
										{
											"key": "Otp",
											"value": "{{otp}}"
										},
										{
											"key": "NewPassword",
											"value": "{{password}}"
										},
										{
											"key": "ConfirmPassword",
											"value": "{{cpassword}}"
										},
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid phone Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Password reset link sent\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Success\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": {{changenumber}},\r\n    \"Otp\" :\"{{otp}}\",\r\n    \"NewPassword\":\"{{password}}\",\r\n    \"ConfirmPassword\":\"{{cpassword}}\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ValidateOTP?Phone={{changenumber}}&Otp={{otp}}&lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ValidateOTP"
									],
									"query": [
										{
											"key": "Phone",
											"value": "{{changenumber}}"
										},
										{
											"key": "Otp",
											"value": "{{otp}}"
										},
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unregistered phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User not found error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"User not found!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Phone\": \"01144111137\",\r\n    \"Otp\" :\"587456\",\r\n    \"NewPassword\":\"123es\",\r\n    \"ConfirmPassword\":\"123es\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Auth/ForgetPassword?Phone=01116590587&Otp=587456&NewPassword=123es&ConfirmPassword=123es&lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Auth",
										"ForgetPassword"
									],
									"query": [
										{
											"key": "Phone",
											"value": "01116590587"
										},
										{
											"key": "Otp",
											"value": "587456"
										},
										{
											"key": "NewPassword",
											"value": "123es"
										},
										{
											"key": "ConfirmPassword",
											"value": "123es"
										},
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders & Cart APIs",
			"item": [
				{
					"name": "Order",
					"item": [
						{
							"name": "Add Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Order created successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.memberId).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"memberId\": {{userid}},\r\n  \"providerId\": {{providerId}},\r\n  \"branchId\": {{branchId}},\r\n  \"paymentMethod\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Order/AddOrder?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"AddOrder"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Order invalid_branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"invalid  Branch ID\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Branch not  found\");\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"memberId\": {{userid}},\r\n  \"providerId\": {{providerId}},\r\n  \"branchId\": 0,\r\n  \"paymentMethod\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Order/AddOrder?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"AddOrder"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid providerId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid provider ID\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"User not found!\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"providerId\": 0,\r\n  \"memberId\": 70,\r\n  \"branchId\": 128,\r\n  \"services\": [\r\n    { \"serviceId\": 1, \"price\": 100 }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Order/AddOrder?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"AddOrder"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Token required\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Unauthorized access\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"providerId\": 0,\r\n  \"memberId\": 456,\r\n  \"branchId\": 789,\r\n  \"services\": [\r\n    { \"serviceId\": 1, \"price\": 100 }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Order/AddOrder?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"AddOrder"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Order_History",
					"item": [
						{
							"name": "Valid_Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Order history retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    let response = pm.response.json();  // Parse the response JSON\r",
											"\r",
											"    if (response.result && response.result.length > 0) {\r",
											"    let firstOrderId = response.result[0].orderId;  // Get the first order ID\r",
											"    pm.environment.set(\"orderId\", firstOrderId);  // Save it as an environment variable\r",
											"}\r",
											"\r",
											"   \r",
											"    pm.expect(response.result).to.be.an(\"array\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Order/OrderHistory?lang={{lang}}&memberId={{userid}}&categoryId={{catgoryId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"OrderHistory"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{userid}}"
										},
										{
											"key": "categoryId",
											"value": "{{catgoryId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing_provider_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing provider ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});\r",
											"pm.test(\"Missing memberId error appears\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    // Check if 'errors' field exists and contains 'memberId'\r",
											"    pm.expect(response).to.have.property(\"errors\");\r",
											"    pm.expect(response.errors).to.have.property(\"memberId\");\r",
											"\r",
											"    // Validate the exact error message\r",
											"    pm.expect(response.errors.memberId[0]).to.eql(\"The memberId field is required.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Order/OrderHistory?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"OrderHistory"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order_ID",
					"item": [
						{
							"name": "Valid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Order details retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"\r",
											"    // Retrieve orderId from environment and convert to number\r",
											"    let expectedOrderId = Number(pm.environment.get(\"orderId\"));\r",
											"\r",
											"    // Check if orderId exists in response and matches the expected value\r",
											"    pm.expect(response).to.have.property(\"orderId\", expectedOrderId);\r",
											"\r",
											"    // Optional: Log for debugging\r",
											"    console.log(\"Expected Order ID:\", expectedOrderId);\r",
											"    console.log(\"Response Order ID:\", response.orderId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Order/GetOrderById?lang={{lang}}&orderId={{orderId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"GetOrderById"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "orderId",
											"value": "{{orderId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid order ID error\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"order Not fount\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Order/GetOrderById?lang={{lang}}&orderId={{orderId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Order",
										"GetOrderById"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "orderId",
											"value": "{{orderId_invalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cart",
					"item": [
						{
							"name": "AddServiceToCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service added to cart successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Added\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"serviceId\": {{serviceId}},\r\n  \"providerId\": {{providerId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Cart/AddServiceToCart?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"AddServiceToCart"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AddServiceToCart (Invalid_already_in the cart)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Service added to cart successfully\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"The service is already in the cart.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"serviceId\": {{serviceId}},\r\n  \"providerId\": {{providerId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Cart/AddServiceToCart?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"AddServiceToCart"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetServiceFromCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cart items retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.result).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"Check itemId, providerId, providerName, and non-empty result\", () => {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    // Ensure 'result' array is not empty\r",
											"    pm.expect(response.result).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    // Get the first item in the result array\r",
											"    let firstItem = response.result[0];\r",
											"\r",
											"    // Validate required fields\r",
											"    pm.expect(firstItem).to.have.property(\"itemId\");\r",
											"    pm.expect(firstItem).to.have.property(\"providerId\");\r",
											"    pm.expect(firstItem).to.have.property(\"providerName\");\r",
											"\r",
											"    // Optional: If you have expected values stored in environment variables, check against them\r",
											"    pm.expect(firstItem.providerId).to.eql(parseInt(pm.environment.get(\"providerId\")));\r",
											"    pm.expect(firstItem.providerName).to.eql(pm.environment.get(\"provider_name\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startPage\": 1,\r\n  \"pageSize\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Cart/GetServiceFromCart?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"GetServiceFromCart"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Item deleted from cart successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Deleted\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Cart/DeleteItem?lang={{lang}}&serviceId={{serviceId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"DeleteItem"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "serviceId",
											"value": "{{serviceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteItem Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Item deleted from cart successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Deleted\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Cart/DeleteItem?lang={{lang}}&serviceId={{serviceId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"DeleteItem"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "serviceId",
											"value": "{{serviceId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteItem (invalid_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid item ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Data not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Cart/DeleteItem?lang={{lang}}&serviceId=123",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"DeleteItem"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "serviceId",
											"value": "123"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Empty cart response\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											"pm.test(\"Check if cart is empty\", () => {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    // Ensure 'result' array exists and is empty\r",
											"    pm.expect(response.result).to.be.an(\"array\").that.is.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"items\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Cart/GetServiceFromCart?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Cart",
										"GetServiceFromCart"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Category",
					"item": [
						{
							"name": "get_all_category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"\r",
											"pm.test(\"Response contains token\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.result).to.be.an(\"array\");\r",
											"    \r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Category/GetCategories?lang={{lang}}&name&startPage={{startPage}}&pageSize={{pageSize}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Category",
										"GetCategories"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "name",
											"value": null
										},
										{
											"key": "startPage",
											"value": "{{startPage}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_all_category (ar_version)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"\r",
											"pm.test(\"Response contains token\", () => {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.result).to.be.an(\"array\");\r",
											"    \r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Category/GetCategories?lang={{lang_ar}}&name&startPage={{startPage}}&pageSize={{pageSize}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Category",
										"GetCategories"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang_ar}}"
										},
										{
											"key": "name",
											"value": null
										},
										{
											"key": "startPage",
											"value": "{{startPage}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW15cmFzaGVkNTcwOSIsImp0aSI6IjE5ZTNhZmJlLTQwYWMtNDJmNi1iOTc1LTJhOTlmN2QwMmZiZiIsInBob25lIjoiMDExNDQxMTExMzciLCJtZW1iZXJJZCI6IjcwIiwidWlkIjoiaNjMiLCJyb2xlcyI6IlVzZXIiLCJleHAiOjE3Mzk3MDgyMjEsImlzcyI6IlNlY3VyZUFwaSIsImF1ZCI6IlNlY3VyZUFwaVVzZXIifQ.8qy7-6Gr87-Pt9c236KJwzeMfOXuhBLOa39DRYZIyzc",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "Card",
					"item": [
						{
							"name": "Valid card details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Card added successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Added\");\r",
											"    pm.expect(response.cardId).to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{first}}\",\r\n  \"cardNumber\": \"{{Card_Number}}\",\r\n  \"expiryDate\": \"{{Card_exp}}\",\r\n  \"cvv\": \"{{Card_CVV}}\",\r\n  \"memberId\": {{userid}},\r\n  \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/AddNewCard?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"AddNewCard"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing CVV field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing CVV field\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});\r",
											"pm.test(\"Check if CVV validation error exists\", function () {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    pm.expect(response).to.have.property(\"errors\"); // Ensure \"errors\" key exists\r",
											"    pm.expect(response.errors).to.have.property(\"CVV\"); // Ensure \"CVV\" key exists in errors\r",
											"    pm.expect(response.errors.CVV).to.include(\"The CVV field is required.\"); // Check if the expected error exists\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{first}}\",\r\n  \"cardNumber\": \"{{Card_Number}}\",\r\n  \"expiryDate\": \"{{Card_exp}}\",\r\n  \"memberId\": {{userid}},\r\n  \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/AddNewCard?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"AddNewCard"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid card number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid card number\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Invalid Card number\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{first}}\",\r\n  \"cardNumber\": \"111\",\r\n  \"expiryDate\": \"{{Card_exp}}\",\r\n  \"cvv\": \"{{Card_CVV}}\",\r\n  \"memberId\": {{userid}},\r\n  \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/AddNewCard?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"AddNewCard"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Token required\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Unauthorized access\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Test User\",\r\n  \"cardNumber\": \"1111111111111111\",\r\n  \"expiryDate\": \"12/26\",\r\n  \"memberId\": 456,\r\n  \"isDefault\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/AddNewCard?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"AddNewCard"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCardsByMemberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Cards retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"});\r",
											"pm.test(\"Check if card details match expected values\", function () {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    // Extract the first card object (assuming there's only one card in the array)\r",
											"    let card = response[0];\r",
											"\r",
											"    // Retrieve expected values from Postman environment variables\r",
											"    let expectedName = pm.environment.get(\"first\");\r",
											"    let expectedCardNumber = pm.environment.get(\"Card_Number\");\r",
											"    let expectedExpiryDate = pm.environment.get(\"Card_exp\");\r",
											"\r",
											"    // Perform assertions to verify values match\r",
											"    pm.expect(card.name).to.eql(expectedName, \"Name does not match\");\r",
											"    pm.expect(card.cardNumber).to.eql(expectedCardNumber, \"Card Number does not match\");\r",
											"    pm.expect(card.expiryDate).to.eql(expectedExpiryDate, \"Expiry Date does not match\");\r",
											"\r",
											"    // Save the card ID in the environment variable for future use\r",
											"    pm.environment.set(\"Visa_Card_ID\", card.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://khusm-api.mediconsulteg.com/api/Payment/GetCardsByMemberId?lang={{lang}}&memberId={{userid}}",
									"protocol": "https",
									"host": [
										"khusm-api",
										"mediconsulteg",
										"com"
									],
									"path": [
										"api",
										"Payment",
										"GetCardsByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteCard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Card deleted successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Deleted\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/DeleteCard?lang={{lang}}&cardId={{Visa_Card_ID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"DeleteCard"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "cardId",
											"value": "{{Visa_Card_ID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCardsByMemberId (Invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid member ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Data not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Payment/GetCardsByMemberId?lang={{lang}}&memberId={{memberId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"GetCardsByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{memberId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteCard (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid card ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Data not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/DeleteCard?lang={{lang}}&cardId={{Visa_Card_ID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"DeleteCard"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "cardId",
											"value": "{{Visa_Card_ID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzYW15cmFzaGVkNTcwOSIsImp0aSI6IjE5ZTNhZmJlLTQwYWMtNDJmNi1iOTc1LTJhOTlmN2QwMmZiZiIsInBob25lIjoiMDExNDQxMTExMzciLCJtZW1iZXJJZCI6IjcwIiwidWlkIjoiNjMiLCJyb2xlcyI6IlVzZXIiLCJleHAiOjE3Mzk3MDgyMjEsImlzcyI6IlNlY3VyZUFwaSIsImF1ZCI6IlNlY3VyZUFwaVVzZXIifQ.8qy7-6Gr87-Pt9c236KJwzeMfOXuhBLOa39DRYZIyzc",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "GetPaymentByMemberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payments retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"payments\": [\r\n    {\r\n      \"paymentId\": 202,\r\n      \"amount\": 50.0\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Payment/GetPaymentByMemberId?lang={{lang}}&memberId={{userid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"GetPaymentByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetPaymentByMemberId (Invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid member ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"User not found!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Payment/GetPaymentByMemberId?lang={{lang}}&memberId={{memberId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Payment",
										"GetPaymentByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{memberId_invalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "FAQs",
					"item": [
						{
							"name": "Valid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"FAQs retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    \r",
											"});\r",
											"pm.test(\"Response contains an array\", function () {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"    pm.expect(response).to.be.an(\"array\"); // Check if response is an array\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"question\": \"What is Khusm?\",\r\n        \"answer\": \"Khusm is a discount management system.\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"question\": \"How to register?\",\r\n        \"answer\": \"You can register through the website.\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"question\": \"What is the refund policy?\",\r\n        \"answer\": \"Refunds are processed within 7 working days.\"\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"question\": \"How to contact support?\",\r\n        \"answer\": \"You can contact support via email or phone.\"\r\n    },\r\n    {\r\n        \"id\": 5,\r\n        \"question\": \"Is there a mobile app?\",\r\n        \"answer\": \"Yes, a mobile app is available for iOS and Android.\"\r\n    },\r\n    {\r\n        \"id\": 6,\r\n        \"question\": \"What is Khusm?\",\r\n        \"answer\": \"Khusm is a discount management system.\"\r\n    },\r\n    {\r\n        \"id\": 7,\r\n        \"question\": \"How to register?\",\r\n        \"answer\": \"You can register through the website.\"\r\n    },\r\n    {\r\n        \"id\": 8,\r\n        \"question\": \"What is the refund policy?\",\r\n        \"answer\": \"Refunds are processed within 7 working days.\"\r\n    },\r\n    {\r\n        \"id\": 9,\r\n        \"question\": \"How to contact support?\",\r\n        \"answer\": \"You can contact support via email or phone.\"\r\n    },\r\n    {\r\n        \"id\": 10,\r\n        \"question\": \"Is there a mobile app?\",\r\n        \"answer\": \"Yes, a mobile app is available for iOS and Android.\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Settings/GetFAQs?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"GetFAQs"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contact Us",
					"item": [
						{
							"name": "Valid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Contact details retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lazyLoader\": {},\r\n    \"phone\": \"12345\",\r\n    \"email\": \"khusm@gmail.com\",\r\n    \"hotLine\": \"123\",\r\n    \"id\": 1,\r\n    \"isDeleted\": false,\r\n    \"createdDate\": \"2025-01-21T20:19:32.32\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Settings/ContactUs?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"ContactUs"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "About Us",
					"item": [
						{
							"name": "Valid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Terms and conditions retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    // const response = pm.response.json();\r",
											"    // pm.expect(response.terms).to.be.a(\"string\");\r",
											"});\r",
											"pm.test(\"Response contains an array\", function () {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"    pm.expect(response).to.be.an(\"array\"); // Check if response is an array\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Settings/TermsAndConditions?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"TermsAndConditions"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Terms_Conditions",
					"item": [
						{
							"name": "Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"About us details retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    // const response = pm.response.json();\r",
											"    // pm.expect(response.about).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Settings/AboutUs?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"AboutUs"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Language",
					"item": [
						{
							"name": "AddLanguageByMemberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Language updated successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Added\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"language\": \"jap\",\r\n  \"id\": 89\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Settings/AddLanguageByMemberId?lang={{lang}}&memberId={{userid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"AddLanguageByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLanguageByMemberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Language retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.language).to.eql(\"en\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Settings/GetLanguageByMemberId?lang={{lang}}&memberId={{userid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"GetLanguageByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetLanguageByMemberId (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid member ID error\", () => {\r",
											"    pm.response.to.have.status(400); // Ensure status code is 400\r",
											"\r",
											"    let response = pm.response.text().trim(); // Trim whitespace & remove quotes\r",
											"\r",
											"    pm.expect(response).to.eql('\"User not found!\"'); // Validate response message\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Settings/GetLanguageByMemberId?lang={{lang}}&memberId={{memberId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"GetLanguageByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "{{memberId_invalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notifications",
					"item": [
						{
							"name": "GetNotificationEnabledByMemberId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Notification status retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.isNotificationEnabled).to.be.a(\"boolean\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Settings/GetNotificationEnabledByMemberId?lang={{lang}}&memberId=28",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"GetNotificationEnabledByMemberId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "memberId",
											"value": "28"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid notification update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Notification settings updated successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Added\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isNotificationEnabbled\": {{bool_true}},\r\n  \"id\": {{userid}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Settings/AddNotificationEnabledForMember?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Settings",
										"AddNotificationEnabledForMember"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Provider & Services",
			"item": [
				{
					"name": "Providers",
					"item": [
						{
							"name": "Get All Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Providers retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.provider).to.be.an(\"array\");\r",
											"    pm.expect(response.provider.length).to.be.greaterThan(0); // assuming provider data is an array\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Provider/GetAllProvidersAsync?lang={{lang}}&categoryId&providerName&startPage={{startPage}}&pageSize={{pageSize}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetAllProvidersAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "categoryId",
											"value": null
										},
										{
											"key": "providerName",
											"value": null
										},
										{
											"key": "startPage",
											"value": "{{startPage}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Providers_byname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Providers retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.provider).to.be.an(\"array\");\r",
											"    pm.expect(response.provider.length).to.be.greaterThan(0); // assuming provider data is an array\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Provider/GetAllProvidersAsync?lang={{lang}}&categoryId&providerName={{provider_name}}&startPage={{startPage}}&pageSize={{pageSize}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetAllProvidersAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "categoryId",
											"value": null
										},
										{
											"key": "providerName",
											"value": "{{provider_name}}"
										},
										{
											"key": "startPage",
											"value": "{{startPage}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Providers_by_Categoryid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Providers retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response.provider).to.be.an(\"array\");\r",
											"    pm.expect(response.provider.length).to.be.greaterThan(0); // assuming provider data is an array\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Provider/GetAllProvidersAsync?lang={{lang}}&categoryId={{catgoryId}}&startPage={{startPage}}&pageSize={{pageSize}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetAllProvidersAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "categoryId",
											"value": "{{catgoryId}}"
										},
										{
											"key": "providerName",
											"value": "{{providerId}}",
											"disabled": true
										},
										{
											"key": "startPage",
											"value": "{{startPage}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProviderbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Provider details retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"});\r",
											"\r",
											"pm.test(\"Validate provider ID and name\", () => {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    let expectedProviderId = pm.environment.get(\"providerId\"); // Get stored provider ID\r",
											"    let expectedProviderName = pm.environment.get(\"provider_name\"); // Get stored provider name\r",
											"\r",
											"    pm.expect(response.id).to.eql(parseInt(expectedProviderId)); // Validate ID\r",
											"    pm.expect(response.name).to.eql(expectedProviderName); // Validate Name\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Provider/GetProviderbyIdAsync?lang={{lang}}&providerId={{providerId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetProviderbyIdAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "providerId",
											"value": "{{providerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProviderbyId (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid provider ID error\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Provider not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Provider/GetProviderbyIdAsync?lang={{lang}}&providerId={{memberId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetProviderbyIdAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "providerId",
											"value": "{{memberId_invalid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProviderCategoryById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Provider category retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"});\r",
											"pm.test(\"Check if provider ID and name exist in the response array\", () => {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    let expectedProviderId = parseInt(pm.environment.get(\"providerId\")); // Get stored provider ID\r",
											"    let expectedProviderName = pm.environment.get(\"provider_name\"); // Get stored provider name\r",
											"\r",
											"    let providerExists = response.some(provider => \r",
											"        provider.id === expectedProviderId && provider.name === expectedProviderName\r",
											"    );\r",
											"\r",
											"    pm.expect(providerExists).to.be.true; // Test passes if provider exists\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"Category A\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/Provider/GetProviderCategoryByIdAsync?lang={{lang}}&categoryId={{catgoryId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetProviderCategoryByIdAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "categoryId",
											"value": "{{catgoryId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProviderCategoryById invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid category ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Invalid category ID\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/Provider/GetProviderCategoryByIdAsync?lang={{lang}}&categoryId={{catgoryId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"Provider",
										"GetProviderCategoryByIdAsync"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "categoryId",
											"value": "{{catgoryId_invalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ProviderNetwork",
					"item": [
						{
							"name": "GetBranchByProviderId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Branches retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    // pm.expect(response.branches).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetBranchByProviderId?lang={{lang}}&providerId={{providerId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetBranchByProviderId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "providerId",
											"value": "{{providerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBranchByProviderId (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid provider ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Invalid provider ID\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetBranchByProviderId?lang={{lang}}&providerId={{memberId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetBranchByProviderId"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "providerId",
											"value": "{{memberId_invalid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProviderLocation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Provider locations retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.locations).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check if locations are not empty\", () => {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    pm.expect(response.locations).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetProviderLocation?lang={{lang}}&providerId={{providerId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetProviderLocation"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "providerId",
											"value": "{{providerId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProviderLocation (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid provider ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Invalid provider ID\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetProviderLocation?lang={{lang}}&providerId={{memberId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetProviderLocation"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "providerId",
											"value": "{{memberId_invalid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllBranches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"All branches retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.branches).to.be.an(\"array\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lang\": \"en\",\r\n  \"category\": [\r\n    \"DENTAL CENTER\"\r\n  ],\r\n  \"city\": \"Dokki\",\r\n  \"government\": \"Giza\",\r\n  \"startPage\": 1,\r\n  \"pageSize\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetAllBranches?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetAllBranches"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBranchById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Branch details retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const response = pm.response.json();\r",
											"     let expectedBranchId = Number(pm.environment.get(\"branchId\"));\r",
											"\r",
											"    // Check if 'id' exists in response and matches the expected branchId\r",
											"    pm.expect(response).to.have.property(\"id\", expectedBranchId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"branchId\": 1,\r\n  \"name\": \"Branch A\",\r\n  \"addressEn\": \"123 Main St\",\r\n  \"addressAr\": \"123 الشارع الرئيسي\",\r\n  \"phone\": \"01144111137\",\r\n  \"email\": \"branch@example.com\",\r\n  \"isManagement\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetBranchById?lang={{lang}}&branchId={{branchId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetBranchById"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "branchId",
											"value": "{{branchId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing branch ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Missing branch ID error\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    \r",
											"});\r",
											"pm.test(\"Missing branchId error\", () => {\r",
											"    let response = pm.response.json(); // Parse JSON response\r",
											"\r",
											"    // Check the response status\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"    // Validate that the error message exists for branchId\r",
											"    pm.expect(response.errors).to.have.property(\"branchId\");\r",
											"    pm.expect(response.errors.branchId).to.include(\"The branchId field is required.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetBranchById?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetBranchById"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBranchById (invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid branch ID error\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Branch not  found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/ProviderNetwork/GetBranchById?lang={{lang}}&branchId={{branchId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"ProviderNetwork",
										"GetBranchById"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										},
										{
											"key": "branchId",
											"value": "{{branchId_invalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "App_Tutotrial",
			"item": [
				{
					"name": "authorized_app_tutorial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"App Tutorial retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/AppTutorial/AppTutorial?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"AppTutorial",
								"AppTutorial"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "not_authorized_app_tutorial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"App Tutorial Unauthorized\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/AppTutorial/AppTutorial?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"AppTutorial",
								"AppTutorial"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Firebase",
			"item": [
				{
					"name": "Firebase_token",
					"item": [
						{
							"name": "Save_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Saved Token successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"});\r",
											"pm.test(\"Response has successfully message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Token Saved\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{userid}},\r\n  \"token\": \"{{token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FirebaseToken/SaveToken?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FirebaseToken",
										"SaveToken"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Save_Token (invalid_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User not found! message\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"   \r",
											"});\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"User not found!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": {{memberId_invalid}},\r\n  \"token\": \"{{token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FirebaseToken/SaveToken?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FirebaseToken",
										"SaveToken"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Firebase",
					"item": [
						{
							"name": "SendNotification_valid_user",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"memberId\": \"{{userid}}\",\r\n  \"title\": \"string\",\r\n  \"body\": \"string\",\r\n  \"imageUrl\": \"https://www.spaceo.ca/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2FCTA%20Persopn.4585c9ac.png&w=384&q=75\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SendNotification?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SendNotification"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SendNotification_valid_user Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"memberId\": {{memberId_invalid}},\r\n  \"title\": \"string\",\r\n  \"body\": \"string\",\r\n  \"imageUrl\": \"https://www.spaceo.ca/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2FCTA%20Persopn.4585c9ac.png&w=384&q=75\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SendNotification?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SendNotification"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "send_notification (invalid_img)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Imges not Url\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"   \r",
											"});\r",
											"pm.test(\"Response has error message\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.message).to.eql(\"Imges not Url\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"memberId\": {{userid}},\r\n  \"title\": \"Eslam\",\r\n  \"body\": \"Samy\",\r\n  \"imageUrl\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SendNotification?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SendNotification"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SendNotificationToAll",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"title\": \"string\",\r\n  \"body\": \"string\",\r\n  \"imageUrl\": \"https://www.spaceo.ca/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2FCTA%20Persopn.4585c9ac.png&w=384&q=75\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SendNotificationToAll?lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SendNotificationToAll"
									],
									"query": [
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AllNotification",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"title\": \"string\",\r\n  \"body\": \"string\",\r\n  \"imageUrl\": \"https://www.spaceo.ca/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2FCTA%20Persopn.4585c9ac.png&w=384&q=75\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/AllNotification?memberId={{userid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"AllNotification"
									],
									"query": [
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "seen Notification",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"title\": \"string\",\r\n  \"body\": \"string\",\r\n  \"imageUrl\": \"https://www.spaceo.ca/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2FCTA%20Persopn.4585c9ac.png&w=384&q=75\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SeenNotification?memberId={{userid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SeenNotification"
									],
									"query": [
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SeenNotificationAll",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/FireBase/SeenAllNotification?memberId={{userid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SeenAllNotification"
									],
									"query": [
										{
											"key": "memberId",
											"value": "{{userid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteNotification",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/FireBase/DeleteNotification?notificationId={{notificationId}}&lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"DeleteNotification"
									],
									"query": [
										{
											"key": "notificationId",
											"value": "{{notificationId}}"
										},
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteNotification Copy",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/FireBase/DeleteNotification?notificationId={{notificationId_invalid}}&lang={{lang}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"DeleteNotification"
									],
									"query": [
										{
											"key": "notificationId",
											"value": "{{notificationId_invalid}}"
										},
										{
											"key": "lang",
											"value": "{{lang}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "See_Notification_notificationId",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isSeen\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SeenAllNotification?Id={{notificationId}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SeenAllNotification"
									],
									"query": [
										{
											"key": "Id",
											"value": "{{notificationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "See_Notification_notificationId (invalid)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isSeen\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/FireBase/SeenAllNotification?Id={{notificationId_invalid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"FireBase",
										"SeenAllNotification"
									],
									"query": [
										{
											"key": "Id",
											"value": "{{notificationId_invalid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Home Page",
			"item": [
				{
					"name": "Healthtips",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health_Tips retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/HomePage/GetHealthTips?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"HomePage",
								"GetHealthTips"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "find_near_me",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"FindNearMe\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    let response = pm.response.json();\r",
									"    pm.expect(response.result).to.be.an(\"array\");\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startPage\": {{startPage}},\r\n  \"pageSize\": {{pageSize}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/HomePage/FindNearMe?lang={{lang}}&longitude=0.0&latitude=0.0&providerName&categoryId&maxDistanceKm=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"HomePage",
								"FindNearMe"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "longitude",
									"value": "0.0"
								},
								{
									"key": "latitude",
									"value": "0.0"
								},
								{
									"key": "providerName",
									"value": null
								},
								{
									"key": "categoryId",
									"value": null
								},
								{
									"key": "maxDistanceKm",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Banners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Banners retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/HomePage/GetBanners?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"HomePage",
								"GetBanners"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "get_all_goverment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"all_Governments retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Location/GetGovernments?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Location",
								"GetGovernments"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_all_Cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"all_Governments retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Location/GetCities?lang={{lang}}&govId={{govId }}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Location",
								"GetCities"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "cityName",
									"value": null,
									"disabled": true
								},
								{
									"key": "govId",
									"value": "{{govId }}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_all_Cities (ar)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"all_Governments retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Location/GetCities?lang={{lang_ar}}&govId={{govId }}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Location",
								"GetCities"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang_ar}}"
								},
								{
									"key": "cityName",
									"value": "",
									"disabled": true
								},
								{
									"key": "govId",
									"value": "{{govId }}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_City_by_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"all_Cities retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});\r",
									"pm.test(\"City name is Red Sea\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"\r",
									"    pm.expect(response).to.be.an(\"array\"); // Ensure response is an array\r",
									"    pm.expect(response[0].cityName).to.eql(\"Marsa Alam\"); // Check value\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Location/GetCities?lang={{lang}}&govId={{govId }}&cityName={{cityName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Location",
								"GetCities"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "govId",
									"value": "{{govId }}"
								},
								{
									"key": "cityName",
									"value": "{{cityName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_all_goverment (ar_version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"all_Governments retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Location/GetGovernments?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Location",
								"GetGovernments"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_goverment_by_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Government_name retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"   \r",
									"});\r",
									"pm.test(\"Government name is Red Sea\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"\r",
									"    pm.expect(response).to.be.an(\"array\"); // Ensure response is an array\r",
									"    pm.expect(response[0].governmentName).to.eql(\"Red Sea\"); // Check value\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Location/GetGovernments?lang={{lang}}&name=Red Sea",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Location",
								"GetGovernments"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "name",
									"value": "Red Sea"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "Get_services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Services retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"    \r",
									"   \r",
									"});\r",
									"pm.test(\"Result contains an array\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    pm.expect(response.result).to.be.an(\"array\");// Check if response is an array\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startPage\": 1,\r\n  \"pageSize\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Service/GetService?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Service",
								"GetService"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_services_valid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Services retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"    \r",
									"   \r",
									"});\r",
									"pm.test(\"Validate providerId from environment\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    \r",
									"    let expectedServiceName = pm.environment.get(\"serviceName\"); // Get serviceName from environment\r",
									"    let expectedProviderId = pm.environment.get(\"serviceId\"); // Get providerId from environment\r",
									"\r",
									"    \r",
									"\r",
									"     // Get the first service item\r",
									"\r",
									"    \r",
									"    pm.expect(response.serviceId).to.eql(parseInt(expectedProviderId), \"providerId does not match\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startPage\": 1,\r\n  \"pageSize\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Service/GetServiceByID?lang={{lang}}&serviceId={{serviceId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Service",
								"GetServiceByID"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "serviceId",
									"value": "{{serviceId}}"
								},
								{
									"key": "serviceName",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_services_invalid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Services ID\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"    \r",
									"   \r",
									"});\r",
									"pm.test(\" Result is empty\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    pm.expect(response.result.length === 0).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startPage\": 1,\r\n  \"pageSize\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Service/GetService?lang={{lang}}&providerId={{memberId_invalid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Service",
								"GetService"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "providerId",
									"value": "{{memberId_invalid}}"
								},
								{
									"key": "serviceName",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_services_valid_id _and_service_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Services retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"    pm.expect(response.result).to.be.an(\"array\");\r",
									"   \r",
									"});\r",
									"pm.test(\"Validate serviceName and providerId from environment\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    \r",
									"    let expectedServiceName = pm.environment.get(\"serviceName\"); // Get serviceName from environment\r",
									"    let expectedProviderId = pm.environment.get(\"providerId\"); // Get providerId from environment\r",
									"\r",
									"    pm.expect(response.result).to.be.an(\"array\").and.to.have.length.above(0); // Ensure 'result' is an array with data\r",
									"\r",
									"    let service = response.result[0]; // Get the first service item\r",
									"\r",
									"    pm.expect(service.serviceNameEn).to.eql(expectedServiceName, \"serviceName does not match\");\r",
									"    pm.expect(service.providerId).to.eql(parseInt(expectedProviderId), \"providerId does not match\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"startPage\": 1,\r\n  \"pageSize\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Service/GetService?lang={{lang}}&providerId={{providerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Service",
								"GetService"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								},
								{
									"key": "providerId",
									"value": "{{providerId}}"
								},
								{
									"key": "serviceName",
									"value": "{{serviceName}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscription",
			"item": [
				{
					"name": "get_all_subscrition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Subscription retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"   \r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    pm.expect(response).to.be.an(\"array\"); // Check if response is an array\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Subscription/GetSubscriptionsAsync?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Subscription",
								"GetSubscriptionsAsync"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_subscrition_by _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Subscription retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"   \r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Check if memberId matches expected value\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    let expectedMemberId = pm.environment.get(\"userid\"); // Get the expected value from environment variables\r",
									"\r",
									"    pm.expect(response).to.have.property(\"memberId\"); // Ensure memberId exists\r",
									"    pm.expect(response.memberId).to.eql(parseInt(expectedMemberId)); // Check if it matches\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriptionId\": 1,\r\n  \"memberId\": {{userid}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Subscription/Subscribe?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Subscription",
								"Subscribe"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_subscrition_by _invalid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Subscription retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"   \r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Check if memberId matches expected value\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									" \r",
									"\r",
									"     // Ensure memberId exists\r",
									"    pm.expect(response.message).to.eql(\"User not found!\"); // Check if it matches\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriptionId\": 1,\r\n  \"memberId\": {{memberId_invalid}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Subscription/Subscribe?lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Subscription",
								"Subscribe"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_all_subscrition (ar_version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Subscription retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"   \r",
									"   \r",
									"   \r",
									"});\r",
									"\r",
									"pm.test(\"Response contains an array\", function () {\r",
									"    let response = pm.response.json(); // Parse JSON response\r",
									"    pm.expect(response).to.be.an(\"array\"); // Check if response is an array\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/Subscription/GetSubscriptionsAsync?lang={{lang_ar}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Subscription",
								"GetSubscriptionsAsync"
							],
							"query": [
								{
									"key": "lang",
									"value": "{{lang_ar}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete_Account",
			"item": [
				{
					"name": "ValidAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Account deleted successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql(\"Deleted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Auth/DeleteAccount?userId={{userid}}&lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Auth",
								"DeleteAccount"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userid}}"
								},
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized request\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql(\"User not found!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/Auth/DeleteAccount?userId=01111111111&lang={{lang}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"Auth",
								"DeleteAccount"
							],
							"query": [
								{
									"key": "userId",
									"value": "01111111111"
								},
								{
									"key": "lang",
									"value": "{{lang}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add({\r",
					"    key: 'Content-Type',\r",
					"    value: 'application/json'\r",
					"});\r",
					"\r",
					"// pm.request.headers.add({\r",
					"//     key: 'Authorization',\r",
					"//     value: 'Bearer {{access_token}}'  // Replace {{access_token}} with your dynamic token or environment variable\r",
					"// });\r",
					"\r",
					"// Add any other headers as needed\r",
					"pm.request.headers.add({\r",
					"    key: 'Accept',\r",
					"    value: 'application/json'\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// pm.test(\"Response time is less than 500ms\", () => {\r",
					"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"// });"
				]
			}
		}
	]
}